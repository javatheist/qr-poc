{"version":3,"sources":["components/_helpers/history.js","components/_atomics/PrivateRoute.js","components/layout/Navigation.js","components/_atomics/QrCam.js","components/_atomics/QrImage.js","components/pages/Home.js","components/_atomics/form/index.js","components/_atomics/form/withForm.js","components/_atomics/form/text.js","components/_atomics/form/validations.js","components/_atomics/form/EmailAddress.js","components/pages/Login.js","App.js","index.js"],"names":["history","createBrowserHistory","PrivateRoute","Component","component","rest","render","props","Nav","className","exact","to","QrCam","state","delay","result","handleScan","bind","this","setState","err","console","error","style","height","width","margin","onError","handleError","onScan","class","QrImage","ref","React","createRef","openImageDialog","current","legacyMode","type","value","onClick","Home","FormContext","initState","data","initialValues","validators","errors","Provider","createContext","Form","useState","formState","setFormState","validate","isEmpty","formErrors","Object","entries","reduce","name","messages","validator","length","providerValue","setFieldValue","registerInput","currentValidators","onSubmit","e","preventDefault","onReset","id","children","withForm","InputComponent","useContext","useEffect","inputValue","inputErrors","onChange","val","TextInput","hasError","klass","classNames","label","placeholder","target","map","errMsg","i","renderErrors","defaultProps","requiredValidator","v","emailValidator","RegExp","test","Login","log","App","pathname","useLocation","from","slice","path","document","getElementById"],"mappings":"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","file":"static/js/main.c9f8a513.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\nconst history = createBrowserHistory();\r\n\r\nexport { history };\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\n\r\n// import { accountService } from '_services';\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n    return (\r\n        <Route {...rest} render={props => {\r\n            /*\r\n            const account = accountService.accountValue;\r\n            if (!account) {\r\n                // not logged in so redirect to login page with the return url\r\n                return <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\r\n            }\r\n            */\r\n\r\n            // authorized so return component\r\n            return <Component {...props} />\r\n        }} />\r\n    );\r\n}\r\n\r\nexport { PrivateRoute };\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\n// import { accountService } from '_services';\r\n\r\nfunction Nav() {\r\n    /*\r\n    const [account, setAccount] = useState(null);\r\n    useEffect(() => {\r\n        userService.account.subscribe(x => setAccount(x));\r\n    }, []);\r\n\r\n    // only show nav when logged in\r\n    if (!account) return null;\r\n    */\r\n\r\n    return (\r\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\r\n            <div className=\"navbar-nav\">\r\n                <NavLink exact to=\"/\" className=\"nav-item nav-link\">Login</NavLink> |\r\n                <NavLink exact to=\"/scan\" className=\"nav-item nav-link\">Scan</NavLink>\r\n                { /* <button className=\"btn btn-link nav-item nav-link\" onClick={ userService.logout }>Logout</button> */}\r\n            </div>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport {Nav};\r\n","import React, {Component} from 'react';\r\nimport QrReader from 'react-qr-scanner';\r\n\r\nclass QrCam extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            delay: 500,\r\n            result: 'No result',\r\n        }\r\n\r\n        this.handleScan = this.handleScan.bind(this)\r\n    }\r\n    handleScan(result){\r\n        if(result){\r\n            this.setState({ result })\r\n        }\r\n    }\r\n    handleError(err){\r\n        console.error(err)\r\n    }\r\n    render(){\r\n        const previewStyle = {\r\n            height: 240,\r\n            width: 320,\r\n            margin: '0 auto'\r\n        }\r\n\r\n        return(\r\n            <div>\r\n                <QrReader\r\n                    delay={this.state.delay}\r\n                    style={previewStyle}\r\n                    onError={this.handleError}\r\n                    onScan={this.handleScan}\r\n                />\r\n                <p class=\"qr-result\">{this.state.result}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { QrCam };\r\n","import React, {Component} from 'react';\r\nimport QrReader from 'react-qr-scanner';\r\n\r\nclass QrImage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.ref = React.createRef();\r\n        this.state = {\r\n            delay: 100,\r\n            result: 'No result',\r\n        };\r\n\r\n        this.handleScan = this.handleScan.bind(this);\r\n        this.openImageDialog = this.openImageDialog.bind(this);\r\n    }\r\n\r\n    handleScan(result) {\r\n        if (result) {\r\n            this.setState({result});\r\n        }\r\n    }\r\n\r\n    handleError(err) {\r\n        console.error(err);\r\n    }\r\n\r\n    openImageDialog() {\r\n        this.ref.current.openImageDialog();\r\n    }\r\n\r\n    render() {\r\n        const previewStyle = {\r\n            height: 240,\r\n            width: 320,\r\n            margin: '0 auto'\r\n        };\r\n\r\n        return (\r\n            <div>\r\n                <QrReader\r\n                    ref={this.ref}\r\n                    delay={this.state.delay}\r\n                    style={previewStyle}\r\n                    onError={this.handleError}\r\n                    onScan={this.handleScan}\r\n                    legacyMode\r\n                />\r\n                <input type=\"button\" value=\"Click to Submit QR Code\" onClick={this.openImageDialog}/>\r\n                <p>{this.state.result}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport { QrImage };\r\n","import {QrCam} from \"../_atomics/QrCam\";\r\nimport React from \"react\";\r\nimport {QrImage} from \"../_atomics/QrImage\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <h4 className=\"card-header\">Accenture - QR Scanner</h4>\r\n            <QrCam />\r\n            <h3>ODER QR Bild Upload bei Inkompatibilität</h3>\r\n            <QrImage />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Home };\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { isEmpty } from \"lodash\";\r\n\r\nconst propTypes = {\r\n  initialValues: PropTypes.object,\r\n  onSubmit: PropTypes.func.isRequired,\r\n  onReset: PropTypes.func\r\n};\r\n\r\nconst initState = props => {\r\n  return {\r\n    data: {\r\n      ...props.initialValues\r\n    },\r\n    validators: {},\r\n    errors: {}\r\n  };\r\n};\r\n\r\nlet FormContext;\r\nconst { Provider } = (FormContext = React.createContext());\r\n\r\nconst Form = props => {\r\n  const [formState, setFormState] = useState(initState(props));\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (validate()) {\r\n      props.onSubmit(formState.data);\r\n    }\r\n  };\r\n\r\n  const validate = () => {\r\n    const { validators } = formState;\r\n\r\n    // always reset form errors\r\n    // in case there was form errors from backend\r\n    setFormState(state => ({\r\n      ...state,\r\n      errors: {}\r\n    }));\r\n\r\n    if (isEmpty(validators)) {\r\n      return true;\r\n    }\r\n\r\n    const formErrors = Object.entries(validators).reduce(\r\n      (errors, [name, validators]) => {\r\n        const { data } = formState;\r\n        const messages = validators.reduce((result, validator) => {\r\n          const value = data[name];\r\n          const err = validator(value, data);\r\n          return [...result, ...err];\r\n        }, []);\r\n\r\n        if (messages.length > 0) {\r\n          errors[name] = messages;\r\n        }\r\n\r\n        return errors;\r\n      },\r\n      {}\r\n    );\r\n\r\n    if (isEmpty(formErrors)) {\r\n      return true;\r\n    }\r\n\r\n    setFormState(state => ({\r\n      ...state,\r\n      errors: formErrors\r\n    }));\r\n\r\n    return false;\r\n  };\r\n\r\n  const onReset = e => {\r\n    e.preventDefault();\r\n    setFormState(initState(props));\r\n    if (props.onReset) {\r\n      props.onReset();\r\n    }\r\n  };\r\n\r\n  const setFieldValue = (name, value) => {\r\n    setFormState(state => {\r\n      return {\r\n        ...state,\r\n        data: {\r\n          ...state.data,\r\n          [name]: value\r\n        },\r\n        errors: {\r\n          ...state.errors,\r\n          [name]: []\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const registerInput = ({ name, validators }) => {\r\n    setFormState(state => {\r\n      return {\r\n        ...state,\r\n        validators: {\r\n          ...state.validators,\r\n          [name]: validators || []\r\n        },\r\n        // clear any errors\r\n        errors: {\r\n          ...state.errors,\r\n          [name]: []\r\n        }\r\n      };\r\n    });\r\n\r\n    // returning unregister method\r\n    return () => {\r\n      setFormState(state => {\r\n        // copy state to avoid mutating it\r\n        const { data, errors, validators: currentValidators } = { ...state };\r\n\r\n        // clear field data, validations and errors\r\n        delete data[name];\r\n        delete errors[name];\r\n        delete currentValidators[name];\r\n\r\n        return {\r\n          data,\r\n          errors,\r\n          validators: currentValidators\r\n        };\r\n      });\r\n    };\r\n  };\r\n\r\n  const providerValue = {\r\n    errors: formState.errors,\r\n    data: formState.data,\r\n    setFieldValue,\r\n    registerInput\r\n  };\r\n\r\n  return (\r\n    <Provider value={providerValue}>\r\n      <form\r\n        onSubmit={onSubmit}\r\n        onReset={onReset}\r\n        className={props.className}\r\n        id={props.id}\r\n      >\r\n        {props.children}\r\n      </form>\r\n    </Provider>\r\n  );\r\n};\r\n\r\nForm.propTypes = propTypes;\r\n\r\nexport default Form;\r\nexport { FormContext };\r\n","import React, { useContext, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { FormContext } from \"./index\";\r\n\r\nconst propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  validators: PropTypes.arrayOf(PropTypes.func)\r\n};\r\n\r\nconst withForm = InputComponent => {\r\n  const WrappedWithForm = props => {\r\n    const { errors, data, setFieldValue, registerInput } = useContext(\r\n      FormContext\r\n    );\r\n\r\n    useEffect(\r\n      () =>\r\n        registerInput({\r\n          name: props.name,\r\n          validators: props.validators\r\n        })\r\n    );\r\n\r\n    const onChange = val => {\r\n      setFieldValue(props.name, val);\r\n      if (props.onChange) {\r\n        props.onChange(val);\r\n      }\r\n    };\r\n    const inputValue = data[props.name];\r\n    const inputErrors = errors[props.name] || [];\r\n\r\n    return (\r\n      <InputComponent\r\n        {...props}\r\n        errors={inputErrors}\r\n        value={inputValue}\r\n        onChange={onChange}\r\n      />\r\n    );\r\n  };\r\n\r\n  WrappedWithForm.propTypes = propTypes;\r\n  return WrappedWithForm;\r\n};\r\n\r\nexport default withForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { isEmpty } from \"lodash\";\r\nimport classNames from \"classnames\";\r\n\r\nimport withForm from \"./withForm\";\r\n\r\nimport \"./styles.css\";\r\n\r\nconst propTypes = {\r\n  placeholder: PropTypes.string,\r\n  name: PropTypes.string,\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  type: PropTypes.string,\r\n  errors: PropTypes.arrayOf(PropTypes.string)\r\n};\r\n\r\nconst defaultProps = {\r\n  value: \"\",\r\n  type: \"text\"\r\n};\r\n\r\nconst TextInput = props => {\r\n  const hasError = !isEmpty(props.errors);\r\n\r\n  const renderErrors = () => {\r\n    if (!hasError) {\r\n      return null;\r\n    }\r\n\r\n    const errors = props.errors.map((errMsg, i) => (\r\n      <li key={`${props.name}-error-${i}`} className=\"error\">\r\n        {errMsg}\r\n      </li>\r\n    ));\r\n\r\n    return <ul className=\"error-messages\">{errors}</ul>;\r\n  };\r\n\r\n  const onChange = e => {\r\n    const val = e.target.value;\r\n    props.onChange(val);\r\n  };\r\n\r\n  const klass = classNames(\"form-group\", {\r\n    \"has-error\": hasError\r\n  });\r\n\r\n  return (\r\n    <div className={klass}>\r\n      <label>{props.label}</label>\r\n      <input\r\n        name={props.name}\r\n        type={props.type}\r\n        className=\"form-control\"\r\n        placeholder={props.placeholder}\r\n        onChange={onChange}\r\n        value={props.value}\r\n      />\r\n      {renderErrors()}\r\n    </div>\r\n  );\r\n};\r\n\r\nTextInput.propTypes = propTypes;\r\nTextInput.defaultProps = defaultProps;\r\n\r\nconst FormTextInput = withForm(TextInput);\r\n\r\nexport { TextInput };\r\nexport default FormTextInput;\r\n","export const nameValidator = (fieldName, fieldValue) => {\r\n    if (fieldValue.trim() === \"\") {\r\n      return `${fieldName} is required`;\r\n    }\r\n    if (/[^a-zA-Z -]/.test(fieldValue)) {\r\n      return \"Invalid characters\";\r\n    }\r\n    if (fieldValue.trim().length < 3) {\r\n      return `${fieldName} needs to be at least three characters`;\r\n    }\r\n    return null;\r\n  };\r\n  \r\nexport const requiredValidator = v => v ? [] : [\"This field is required\"];\r\nexport const isEqualValidator = comparator => (v, fg) => (v !== fg[comparator]) ? [\"Fields do not match\"] : [];\r\n\r\nexport const ValidationMessage = ({ valid, visited, validationMessage }) => {\r\n    return (\r\n        <>\r\n        { !valid && visited && (<div className=\"required\">{validationMessage}</div>)}\r\n        </>\r\n    );\r\n}\r\n","\r\nexport const emailValidator = (value) => (\r\n  new RegExp(/^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/).test(value) ? \"\" : \"Please enter a valid email.\"\r\n);\r\n\r\n// function EmailField({ initialValues, validate }) {\r\n\r\nconst EmailField = props => {\r\n\r\n    const classes = [\"form-control\"];\r\n\r\n    if (props.touched && !props.valid) {\r\n        classes.push('control-error');\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor=\"email\">\r\n                {props.label || 'Email address'} {props.required && '*'}\r\n                <input type=\"email\" className={classes.join(' ')} {...props} />\r\n            </label>\r\n            {props.touched && props.errors.email}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmailField;\r\n","import React, {useEffect} from 'react';\r\nimport Form from \"../_atomics/form\";\r\nimport {TextInput} from \"../_atomics/form/text\";\r\nimport {requiredValidator} from \"../_atomics/form/validations\";\r\nimport {emailValidator} from \"../_atomics/form/EmailAddress\";\r\n\r\nfunction Login({history}) {\r\n    /*\r\n    useEffect(() => {\r\n        // redirect to home if already logged in\r\n        if (userService.isLoggedIn) {\r\n            history.push('/');\r\n        }\r\n    }, [history]);\r\n    */\r\n\r\n    return (\r\n        <div className=\"col-md-6 offset-md-3 mt-5 text-center\">\r\n            <div className=\"card\">\r\n                <h4 className=\"card-header\">Accenture - Login</h4>\r\n                <div className=\"card-body\">\r\n                    <Form onSubmit={data => console.log(data)}>\r\n                        <TextInput\r\n                            name=\"email\"\r\n                            validators={[requiredValidator, emailValidator]}\r\n                            placeholder=\"eine.musterperson@domain.at\"\r\n                            label=\"Email\"\r\n                        />\r\n                        <TextInput\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            validators={[requiredValidator]}\r\n                            placeholder=\"****\"\r\n                            label=\"Password\"\r\n                        />\r\n                        <button className=\"submit-btn\" type=\"submit\">\r\n                            Login\r\n                        </button>\r\n                        <button className=\"submit-btn danger\" type=\"reset\">\r\n                            Reset\r\n                        </button>\r\n                    </Form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport {Login};\r\n","import React from 'react';\nimport {Route, Switch, Redirect, useLocation} from 'react-router-dom';\nimport {PrivateRoute} from \"./components/_atomics/PrivateRoute\";\nimport {Nav} from \"./components/layout/Navigation\";\nimport {Home} from \"./components/pages/Home\";\nimport {Login} from \"./components/pages/Login\";\n\nfunction App() {\n    const pathname = useLocation().pathname || '';\n\n    return (\n        <div className=\"container\">\n            <Nav/>\n            <Switch>\n                <Redirect from=\"/:url*(/+)\" to={pathname.slice(0, -1)}/>\n                <PrivateRoute exact path=\"/scan\" component={Home}/>\n                <Route path=\"/\" component={Login}/>\n                <Redirect from=\"*\" to=\"/\"/>\n            </Switch>\n        </div>\n    );\n}\n\nexport {App};\n","import React from 'react';\nimport { Router } from 'react-router-dom';\nimport { render } from 'react-dom';\n\n// here we can import our global stylesheet\nimport './index.css';\n\n// this is where we could import interceptors such as jwt or error handlers\nimport { history } from './components/_helpers';\n\nimport { App } from './App';\n\n// now we could setup a fake backend for testing purposes\n// import { fakeBackend } from './_helpers';\n// fakeBackend();\n\n// enable interceptors for http requests\n// jwtInterceptor();\n// errorInterceptor();\n\n\n// wrap renderer in case we would like to trigger it after some async action\n// function startApp() { \n    render(\n        <Router history={history}>\n            <App />\n        </Router>,\n        document.getElementById('root')\n    );\n// }\n"],"sourceRoot":""}